//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.CFGameServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserExistsFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class UserExistsFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class UserNotExistsFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WrongPasswordFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class WrongPasswordFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserNoLongerConnectedFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class UserNoLongerConnectedFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IllegalMoveFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class IllegalMoveFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MoveResult", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    public enum MoveResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Winning = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Draw = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameOn = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OtherUserDisconnected = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameRecord", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class GameRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.CFGameServiceReference.Game GameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> GameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameRecordIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RecordTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.CFGameServiceReference.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Column {
            get {
                return this.ColumnField;
            }
            set {
                if ((this.ColumnField.Equals(value) != true)) {
                    this.ColumnField = value;
                    this.RaisePropertyChanged("Column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.CFGameServiceReference.Game Game {
            get {
                return this.GameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameField, value) != true)) {
                    this.GameField = value;
                    this.RaisePropertyChanged("Game");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> GameId {
            get {
                return this.GameIdField;
            }
            set {
                if ((this.GameIdField.Equals(value) != true)) {
                    this.GameIdField = value;
                    this.RaisePropertyChanged("GameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameRecordId {
            get {
                return this.GameRecordIdField;
            }
            set {
                if ((this.GameRecordIdField.Equals(value) != true)) {
                    this.GameRecordIdField = value;
                    this.RaisePropertyChanged("GameRecordId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RecordTime {
            get {
                return this.RecordTimeField;
            }
            set {
                if ((this.RecordTimeField.Equals(value) != true)) {
                    this.RecordTimeField = value;
                    this.RaisePropertyChanged("RecordTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.CFGameServiceReference.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class Game : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.CFGameServiceReference.GameRecord[] GameRecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsDrawField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LoserScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.CFGameServiceReference.User[] UsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WinnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinnerScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameId {
            get {
                return this.GameIdField;
            }
            set {
                if ((this.GameIdField.Equals(value) != true)) {
                    this.GameIdField = value;
                    this.RaisePropertyChanged("GameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.CFGameServiceReference.GameRecord[] GameRecords {
            get {
                return this.GameRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.GameRecordsField, value) != true)) {
                    this.GameRecordsField = value;
                    this.RaisePropertyChanged("GameRecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsDraw {
            get {
                return this.IsDrawField;
            }
            set {
                if ((this.IsDrawField.Equals(value) != true)) {
                    this.IsDrawField = value;
                    this.RaisePropertyChanged("IsDraw");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoserName {
            get {
                return this.LoserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LoserNameField, value) != true)) {
                    this.LoserNameField = value;
                    this.RaisePropertyChanged("LoserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoserScore {
            get {
                return this.LoserScoreField;
            }
            set {
                if ((this.LoserScoreField.Equals(value) != true)) {
                    this.LoserScoreField = value;
                    this.RaisePropertyChanged("LoserScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.CFGameServiceReference.User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WinnerName {
            get {
                return this.WinnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerNameField, value) != true)) {
                    this.WinnerNameField = value;
                    this.RaisePropertyChanged("WinnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WinnerScore {
            get {
                return this.WinnerScoreField;
            }
            set {
                if ((this.WinnerScoreField.Equals(value) != true)) {
                    this.WinnerScoreField = value;
                    this.RaisePropertyChanged("WinnerScore");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameDrawsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameLosesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.CFGameServiceReference.GameRecord[] GameRecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameWinsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.CFGameServiceReference.Game[] GamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashedPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameDraws {
            get {
                return this.GameDrawsField;
            }
            set {
                if ((this.GameDrawsField.Equals(value) != true)) {
                    this.GameDrawsField = value;
                    this.RaisePropertyChanged("GameDraws");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameLoses {
            get {
                return this.GameLosesField;
            }
            set {
                if ((this.GameLosesField.Equals(value) != true)) {
                    this.GameLosesField = value;
                    this.RaisePropertyChanged("GameLoses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.CFGameServiceReference.GameRecord[] GameRecords {
            get {
                return this.GameRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.GameRecordsField, value) != true)) {
                    this.GameRecordsField = value;
                    this.RaisePropertyChanged("GameRecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameWins {
            get {
                return this.GameWinsField;
            }
            set {
                if ((this.GameWinsField.Equals(value) != true)) {
                    this.GameWinsField = value;
                    this.RaisePropertyChanged("GameWins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.CFGameServiceReference.Game[] Games {
            get {
                return this.GamesField;
            }
            set {
                if ((object.ReferenceEquals(this.GamesField, value) != true)) {
                    this.GamesField = value;
                    this.RaisePropertyChanged("Games");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HashedPassword {
            get {
                return this.HashedPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.HashedPasswordField, value) != true)) {
                    this.HashedPasswordField = value;
                    this.RaisePropertyChanged("HashedPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CFGameServiceReference.IFourRowService", CallbackContract=typeof(Client.CFGameServiceReference.IFourRowServiceCallback))]
    public interface IFourRowService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/Connect", ReplyAction="http://tempuri.org/IFourRowService/ConnectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.CFGameServiceReference.UserExistsFault), Action="http://tempuri.org/IFourRowService/ConnectUserExistsFaultFault", Name="UserExistsFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.CFGameServiceReference.UserNotExistsFault), Action="http://tempuri.org/IFourRowService/ConnectUserNotExistsFaultFault", Name="UserNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.CFGameServiceReference.WrongPasswordFault), Action="http://tempuri.org/IFourRowService/ConnectWrongPasswordFaultFault", Name="WrongPasswordFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
        void Connect(string userName, string pass, bool register);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/Connect", ReplyAction="http://tempuri.org/IFourRowService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(string userName, string pass, bool register);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/Disconnect", ReplyAction="http://tempuri.org/IFourRowService/DisconnectResponse")]
        void Disconnect(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/Disconnect", ReplyAction="http://tempuri.org/IFourRowService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/GetActivePlayres", ReplyAction="http://tempuri.org/IFourRowService/GetActivePlayresResponse")]
        string[] GetActivePlayres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/GetActivePlayres", ReplyAction="http://tempuri.org/IFourRowService/GetActivePlayresResponse")]
        System.Threading.Tasks.Task<string[]> GetActivePlayresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/PingServer", ReplyAction="http://tempuri.org/IFourRowService/PingServerResponse")]
        bool PingServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/PingServer", ReplyAction="http://tempuri.org/IFourRowService/PingServerResponse")]
        System.Threading.Tasks.Task<bool> PingServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/FinishGame", ReplyAction="http://tempuri.org/IFourRowService/FinishGameResponse")]
        void FinishGame(int gameId, string winnerName, string losserName, bool draw, int winnerScore, int losserScore, bool isUnFinishedGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/FinishGame", ReplyAction="http://tempuri.org/IFourRowService/FinishGameResponse")]
        System.Threading.Tasks.Task FinishGameAsync(int gameId, string winnerName, string losserName, bool draw, int winnerScore, int losserScore, bool isUnFinishedGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/SendGameRequest", ReplyAction="http://tempuri.org/IFourRowService/SendGameRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.CFGameServiceReference.UserNoLongerConnectedFault), Action="http://tempuri.org/IFourRowService/SendGameRequestUserNoLongerConnectedFaultFault" +
            "", Name="UserNoLongerConnectedFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
        int SendGameRequest(string fromClient, string toClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/SendGameRequest", ReplyAction="http://tempuri.org/IFourRowService/SendGameRequestResponse")]
        System.Threading.Tasks.Task<int> SendGameRequestAsync(string fromClient, string toClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/AddRecord", ReplyAction="http://tempuri.org/IFourRowService/AddRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.CFGameServiceReference.IllegalMoveFault), Action="http://tempuri.org/IFourRowService/AddRecordIllegalMoveFaultFault", Name="IllegalMoveFault", Namespace="http://schemas.datacontract.org/2004/07/Server")]
        void AddRecord(int gameNumber, string userName, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/AddRecord", ReplyAction="http://tempuri.org/IFourRowService/AddRecordResponse")]
        System.Threading.Tasks.Task AddRecordAsync(int gameNumber, string userName, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/GetDataAllUsers", ReplyAction="http://tempuri.org/IFourRowService/GetDataAllUsersResponse")]
        System.ValueTuple<string[], System.Collections.Generic.Dictionary<string, System.ValueTuple<int, int, int, int, int>>> GetDataAllUsers(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/GetDataAllUsers", ReplyAction="http://tempuri.org/IFourRowService/GetDataAllUsersResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<string[], System.Collections.Generic.Dictionary<string, System.ValueTuple<int, int, int, int, int>>>> GetDataAllUsersAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/GetAllPlayedGames", ReplyAction="http://tempuri.org/IFourRowService/GetAllPlayedGamesResponse")]
        System.Collections.Generic.Dictionary<int, System.ValueTuple<System.DateTime, System.Nullable<System.DateTime>, string, int, string, int, System.Nullable<bool>>> GetAllPlayedGames(string nameOne, string nameTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/GetAllPlayedGames", ReplyAction="http://tempuri.org/IFourRowService/GetAllPlayedGamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.ValueTuple<System.DateTime, System.Nullable<System.DateTime>, string, int, string, int, System.Nullable<bool>>>> GetAllPlayedGamesAsync(string nameOne, string nameTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/GetRunningGames", ReplyAction="http://tempuri.org/IFourRowService/GetRunningGamesResponse")]
        System.Collections.Generic.Dictionary<int, System.ValueTuple<System.DateTime, string, string>> GetRunningGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/GetRunningGames", ReplyAction="http://tempuri.org/IFourRowService/GetRunningGamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.ValueTuple<System.DateTime, string, string>>> GetRunningGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/NOTUSE", ReplyAction="http://tempuri.org/IFourRowService/NOTUSEResponse")]
        void NOTUSE(Client.CFGameServiceReference.MoveResult t, Client.CFGameServiceReference.GameRecord tx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/NOTUSE", ReplyAction="http://tempuri.org/IFourRowService/NOTUSEResponse")]
        System.Threading.Tasks.Task NOTUSEAsync(Client.CFGameServiceReference.MoveResult t, Client.CFGameServiceReference.GameRecord tx);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFourRowServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/SendRequestToClient", ReplyAction="http://tempuri.org/IFourRowService/SendRequestToClientResponse")]
        bool SendRequestToClient(string fromClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFourRowService/Ping", ReplyAction="http://tempuri.org/IFourRowService/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFourRowService/SendGameNumber")]
        void SendGameNumber(string fromUser, int gameNum);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFourRowService/UpdateClients")]
        void UpdateClients(string[] users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFourRowService/OtherPlayerMoved")]
        void OtherPlayerMoved(string moveResult, int column);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFourRowServiceChannel : Client.CFGameServiceReference.IFourRowService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FourRowServiceClient : System.ServiceModel.DuplexClientBase<Client.CFGameServiceReference.IFourRowService>, Client.CFGameServiceReference.IFourRowService {
        
        public FourRowServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FourRowServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FourRowServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FourRowServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FourRowServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(string userName, string pass, bool register) {
            base.Channel.Connect(userName, pass, register);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string userName, string pass, bool register) {
            return base.Channel.ConnectAsync(userName, pass, register);
        }
        
        public void Disconnect(string userName) {
            base.Channel.Disconnect(userName);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string userName) {
            return base.Channel.DisconnectAsync(userName);
        }
        
        public string[] GetActivePlayres() {
            return base.Channel.GetActivePlayres();
        }
        
        public System.Threading.Tasks.Task<string[]> GetActivePlayresAsync() {
            return base.Channel.GetActivePlayresAsync();
        }
        
        public bool PingServer() {
            return base.Channel.PingServer();
        }
        
        public System.Threading.Tasks.Task<bool> PingServerAsync() {
            return base.Channel.PingServerAsync();
        }
        
        public void FinishGame(int gameId, string winnerName, string losserName, bool draw, int winnerScore, int losserScore, bool isUnFinishedGame) {
            base.Channel.FinishGame(gameId, winnerName, losserName, draw, winnerScore, losserScore, isUnFinishedGame);
        }
        
        public System.Threading.Tasks.Task FinishGameAsync(int gameId, string winnerName, string losserName, bool draw, int winnerScore, int losserScore, bool isUnFinishedGame) {
            return base.Channel.FinishGameAsync(gameId, winnerName, losserName, draw, winnerScore, losserScore, isUnFinishedGame);
        }
        
        public int SendGameRequest(string fromClient, string toClient) {
            return base.Channel.SendGameRequest(fromClient, toClient);
        }
        
        public System.Threading.Tasks.Task<int> SendGameRequestAsync(string fromClient, string toClient) {
            return base.Channel.SendGameRequestAsync(fromClient, toClient);
        }
        
        public void AddRecord(int gameNumber, string userName, int column) {
            base.Channel.AddRecord(gameNumber, userName, column);
        }
        
        public System.Threading.Tasks.Task AddRecordAsync(int gameNumber, string userName, int column) {
            return base.Channel.AddRecordAsync(gameNumber, userName, column);
        }
        
        public System.ValueTuple<string[], System.Collections.Generic.Dictionary<string, System.ValueTuple<int, int, int, int, int>>> GetDataAllUsers(string name) {
            return base.Channel.GetDataAllUsers(name);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<string[], System.Collections.Generic.Dictionary<string, System.ValueTuple<int, int, int, int, int>>>> GetDataAllUsersAsync(string name) {
            return base.Channel.GetDataAllUsersAsync(name);
        }
        
        public System.Collections.Generic.Dictionary<int, System.ValueTuple<System.DateTime, System.Nullable<System.DateTime>, string, int, string, int, System.Nullable<bool>>> GetAllPlayedGames(string nameOne, string nameTwo) {
            return base.Channel.GetAllPlayedGames(nameOne, nameTwo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.ValueTuple<System.DateTime, System.Nullable<System.DateTime>, string, int, string, int, System.Nullable<bool>>>> GetAllPlayedGamesAsync(string nameOne, string nameTwo) {
            return base.Channel.GetAllPlayedGamesAsync(nameOne, nameTwo);
        }
        
        public System.Collections.Generic.Dictionary<int, System.ValueTuple<System.DateTime, string, string>> GetRunningGames() {
            return base.Channel.GetRunningGames();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.ValueTuple<System.DateTime, string, string>>> GetRunningGamesAsync() {
            return base.Channel.GetRunningGamesAsync();
        }
        
        public void NOTUSE(Client.CFGameServiceReference.MoveResult t, Client.CFGameServiceReference.GameRecord tx) {
            base.Channel.NOTUSE(t, tx);
        }
        
        public System.Threading.Tasks.Task NOTUSEAsync(Client.CFGameServiceReference.MoveResult t, Client.CFGameServiceReference.GameRecord tx) {
            return base.Channel.NOTUSEAsync(t, tx);
        }
    }
}
